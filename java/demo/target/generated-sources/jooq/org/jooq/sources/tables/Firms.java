/*
 * This file is generated by jOOQ.
 */
package org.jooq.sources.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.sources.Keys;
import org.jooq.sources.Public;
import org.jooq.sources.tables.records.FirmsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Firms extends TableImpl<FirmsRecord> {

    private static final long serialVersionUID = -110109282;

    /**
     * The reference instance of <code>public.firms</code>
     */
    public static final Firms FIRMS = new Firms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FirmsRecord> getRecordType() {
        return FirmsRecord.class;
    }

    /**
     * The column <code>public.firms.FirmID</code>.
     */
    public final TableField<FirmsRecord, Integer> FIRMID = createField(DSL.name("FirmID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Firms_FirmID_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.firms.FirmName</code>.
     */
    public final TableField<FirmsRecord, String> FIRMNAME = createField(DSL.name("FirmName"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>public.firms.HeadOfficeId</code>.
     */
    public final TableField<FirmsRecord, Integer> HEADOFFICEID = createField(DSL.name("HeadOfficeId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.firms</code> table reference
     */
    public Firms() {
        this(DSL.name("firms"), null);
    }

    /**
     * Create an aliased <code>public.firms</code> table reference
     */
    public Firms(String alias) {
        this(DSL.name(alias), FIRMS);
    }

    /**
     * Create an aliased <code>public.firms</code> table reference
     */
    public Firms(Name alias) {
        this(alias, FIRMS);
    }

    private Firms(Name alias, Table<FirmsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Firms(Name alias, Table<FirmsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Firms(Table<O> child, ForeignKey<O, FirmsRecord> key) {
        super(child, key, FIRMS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<FirmsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FIRMS;
    }

    @Override
    public UniqueKey<FirmsRecord> getPrimaryKey() {
        return Keys.FIRMS_PKEY;
    }

    @Override
    public List<UniqueKey<FirmsRecord>> getKeys() {
        return Arrays.<UniqueKey<FirmsRecord>>asList(Keys.FIRMS_PKEY);
    }

    @Override
    public Firms as(String alias) {
        return new Firms(DSL.name(alias), this);
    }

    @Override
    public Firms as(Name alias) {
        return new Firms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Firms rename(String name) {
        return new Firms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Firms rename(Name name) {
        return new Firms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
